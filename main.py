import math
import time

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove
from aiogram.utils import executor

from config import dp, bot, db, text_on_start, keyb_on_start, cg
from functions import get_btc_sum, request_time_left
from states import GetPaymentData, GetDataForPay, SendReview


def is_created_request(user_id):
    return int(db.get_user_attr(user_id, "request_time")) - time.time() >= 0


@dp.message_handler(commands=['start'])
async def main(message: types.Message):
    if not db.user_exists(message.from_user.id):
        db.add_user(message.from_user.id)
        await bot.send_message(message.chat.id, text_on_start, reply_markup=keyb_on_start)
    else:
        if is_created_request(message.from_user.id):
            await bot.send_message(message.from_user.id,
                                   f"–î–æ –∫–æ–Ω—Ü–∞ –∑–∞—è–≤–∫–∏: {request_time_left(message.from_user.id)}\n{text_on_start}",
                                   reply_markup=keyb_on_start)
        else:
            await bot.send_message(message.from_user.id, text_on_start, reply_markup=keyb_on_start)


@dp.message_handler(content_types=['text'])
async def get_message_text_commands(msg: types.Message):
    user_id = msg.from_user.id
    if msg.text == "–ö—É–ø–∏—Ç—å":
        try:
            created_request = is_created_request(user_id)
        except:
            created_request = False
        if not created_request:
            await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å.", reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton("BTC"),
                        KeyboardButton("ETH")
                    ],
                    [KeyboardButton("–ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True,
                row_width=2
            ))
            await GetPaymentData.get_currency.set()
        else:
            await bot.send_message(msg.from_user.id,
                                   f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç —Ç–µ–∫—É—â—É—é, –∏–ª–∏ –µ—â–µ {request_time_left(msg.from_user.id)}")

    elif msg.text == "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤":
        await bot.delete_message(msg.from_user.id, msg.message_id)
        await bot.send_message(msg.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ")
        await SendReview.get_review.set()

    elif msg.text in ("–ù–∞–∑–∞–¥", "–û—Ç–º–µ–Ω–∞", "–í –º–µ–Ω—é"):
        await bot.send_message(user_id, text_on_start, reply_markup=keyb_on_start)

    else:
        await bot.send_message(user_id, "***", reply_markup=keyb_on_start)


@dp.message_handler(content_types=['text'], state=SendReview.get_review)
async def send_review(msg: types.Message, state: FSMContext):
    review = msg.text
    await bot.delete_message(message_id=msg.message_id, chat_id=msg.from_user.id)
    await bot.send_message(msg.from_user.id, f"–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤\n"
                                             f"–ú–æ–∂–µ—Ç–µ –∏ –¥–∞–ª—å—à–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!",
                           reply_markup=keyb_on_start)
    await state.finish()
    await bot.send_message(781873536, f'@{msg.from_user.username} –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤:\n'
                                      f'"{review}"')


@dp.message_handler(content_types=['text'], state=GetPaymentData.get_currency)
async def get_currency(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    if msg.text == "BTC":
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton("–°–±–µ—Ä–±–∞–Ω–∫"),
                    KeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ"),
                ],
                [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
            ],
            resize_keyboard=True,
            row_width=2
        ))
        await GetPaymentData.get_payment.set()

    elif msg.text == "ETH":
        await state.finish()
        await bot.send_message(user_id, "—Å–∫–æ—Ä–æ...", reply_markup=keyb_on_start)
    elif msg.text == "–ù–∞–∑–∞–¥":
        await state.finish()
        await bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                               reply_markup=keyb_on_start)


@dp.message_handler(content_types=['text'], state=GetPaymentData.get_payment)
async def get_payment(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    sd = ReplyKeyboardRemove()

    await bot.send_message(user_id, "1", reply_markup=sd)
    await bot.delete_message(user_id, msg.message_id + 1)
    
    currency_keyb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="BTC", callback_data="enter_amount-btc"),
                    InlineKeyboardButton(text="–†—É–±–ª—å", callback_data="enter_amount-rub")
                ]
            ],
    )
    if msg.text == "–°–±–µ—Ä–±–∞–Ω–∫":
        db.set_user_attr(user_id, "bank", "sberbank")
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É:", reply_markup=currency_keyb)
        await state.finish()
    elif msg.text == "–¢–∏–Ω—å–∫–æ—Ñ—Ñ":
        db.set_user_attr(user_id, "bank", "tinkoff")
        await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É:", reply_markup=currency_keyb)
        await state.finish()
    elif msg.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                               reply_markup=keyb_on_start)


@dp.callback_query_handler(Text(startswith="enter_amount"))
async def process_enter_amount(call: types.CallbackQuery):
    currency = call.data.split('-')[1]
    price = cg.get_price(ids='bitcoin', vs_currencies='rub')["bitcoin"]["rub"]

    if currency == "btc":
        await call.message.edit_text(f"""üìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 BTC = {price * 1.123} —Ä—É–±–ª–µ–π
–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å BTC?  ( –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.–•–•–•–• - –ü—Ä–∏–º–µ—Ä:  0.011  )""",
                                     reply_markup=InlineKeyboardMarkup(
                                         inline_keyboard=[
                                             [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
                                                                   callback_data="cancel_paymentprocess")]
                                         ]
                                     ))
        await GetDataForPay.get_btc_amount.set()
    elif currency == "rub":
        await call.message.edit_text(f"""üìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 BTC = {price * 1.123}
–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É? (–ü—Ä–∏–º–µ—Ä - 3500)""", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_paymentprocess")]
            ]
        ))
        await GetDataForPay.get_rub_amount.set()


@dp.message_handler(content_types=['text'], state=GetDataForPay.get_btc_amount)
async def get_btc_amount(msg: types.Message):
    user_id = msg.from_user.id
    try:
        amount = float(msg.text)
        price = cg.get_price(ids='bitcoin', vs_currencies='rub')["bitcoin"]["rub"]

        await bot.delete_message(user_id, msg.message_id - 1)
        rub_price = amount * price
        if rub_price >= 2500:
            db.set_user_attr(user_id, column_name="amount", value=amount)
            db.set_user_attr(user_id, column_name="currency", value="btc")

            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.", reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_paymentprocess")]
                ]
            ))
            await GetDataForPay.get_crypto_pocket.set()
        else:
            await bot.send_message(user_id, "–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 2500 —Ä—É–±–ª–µ–π!",
                                   reply_markup=InlineKeyboardMarkup(
                                       inline_keyboard=[
                                           [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_paymentprocess")]
                                       ]
                                   ))
    except ValueError:
        await bot.send_message(user_id, "–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_paymentprocess")]
            ]
        ))


@dp.message_handler(content_types=['text'], state=GetDataForPay.get_rub_amount)
async def get_btc_amount(msg: types.Message):
    user_id = msg.from_user.id
    try:
        amount = float(msg.text)
        if amount >= 2500:
            db.set_user_attr(user_id, column_name="amount", value=amount)
            db.set_user_attr(user_id, column_name="currency", value="rub")

            try:
                await bot.delete_message(user_id, msg.message_id - 1)
            except:
                pass
            await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.", reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_paymentprocess")]
                ]
            ))
            await GetDataForPay.get_crypto_pocket.set()
        else:
            await bot.send_message(user_id, "–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 2500 —Ä—É–±–ª–µ–π!",
                                   reply_markup=InlineKeyboardMarkup(
                                       inline_keyboard=[
                                           [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_paymentprocess")]
                                       ]
                                   ))
    except ValueError:
        await bot.send_message(user_id, "–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_paymentprocess")]
            ]
        ))


@dp.message_handler(content_types=['text'], state=GetDataForPay.get_crypto_pocket)
async def get_crypto_pocket(msg: types.Message, state: FSMContext):
    if 23 <= len(msg.text) <= 65:
        db.set_user_attr(msg.from_user.id, "pocket_address", msg.text)
        sum_in_btc = get_btc_sum(msg.from_user.id)

        await bot.delete_message(msg.from_user.id, msg.message_id - 1)
        await bot.send_message(msg.from_user.id, f"""‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ ‚ö†Ô∏è 
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC
    
üìé  –ö –ø–æ–ª—É—á–µ–Ω–∏—é ‚ûñ   {round(sum_in_btc, 6)} BTC.
üìé  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å ‚ûñ   {db.get_user_attr(msg.from_user.id, "pocket_address")}
üî¥ –û–ß–ï–ù–¨ –í–ê–ñ–ù–û üî¥""", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í—Å—ë —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ", callback_data="payments_correct")],
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="cancel_paymentprocess")]
            ]
        ))
        await state.finish()
    else:
        await bot.send_message(msg.from_user.id,
                               "–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞(–µ–≥–æ –¥–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –º–µ–Ω–µ–µ 23 –∏ –Ω–µ –±–æ–ª–µ–µ 65 —Å–∏–º–≤–æ–ª–æ–≤)",
                               reply_markup=InlineKeyboardMarkup(
                                   inline_keyboard=[
                                       [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                                                             callback_data="cancel_paymentprocess")]
                                   ]
                               ))


@dp.callback_query_handler(Text(startswith="payments_correct"))
async def process_payments1(call: types.CallbackQuery):
    price = cg.get_price(ids='bitcoin', vs_currencies='rub')["bitcoin"]["rub"]

    card_numbers = {
        "sberbank": "5469 9804 2082 3664",
        "tinkoff": "2200 7004 8778 3085"
    }
    bank = db.get_user_attr(call.from_user.id, "bank")
    card_num = card_numbers[bank]

    summ_in_rub = db.get_user_attr(call.from_user.id, "amount")
    if db.get_user_attr(call.from_user.id, "currency") == "btc":
        summ_in_rub = math.ceil(price * db.get_user_attr(call.from_user.id, "amount") * 1.123)

    summ = get_btc_sum(call.from_user.id)
    await call.message.edit_text(f"""‚ö†Ô∏è  –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç ‚û°Ô∏è 30 ‚¨ÖÔ∏è –º–∏–Ω—É—Ç  ‚è∞
    
üìé  –ö–∞—Ä—Ç–∞ {bank[0].upper() + bank[1:]} RUB  ‚ûñ  `{card_num}`
üìé  –°—É–º–º–∞ ‚ûñ    {summ_in_rub} RUB
üìé  –ö –ø–æ–ª—É—á–µ–Ω–∏—é ‚ûñ  {round(summ, 6)} BTC.
üìé  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å ‚ûñ   {db.get_user_attr(call.from_user.id, "pocket_address")}
üî¥ –û–ß–ï–ù–¨ –í–ê–ñ–ù–û üî¥

–í–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É  –∫–∞–∫ –≤—ã–¥–∞–ª‚òùÔ∏è –≤–∞–º –ë–û–¢‚ùóÔ∏è
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∫–∞–∑—ã–≤–∞—Ç—å  –Ω–µ –Ω—É–∂–Ω–æ‚ùóÔ∏è
‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è
üîÜ –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–∞–º —á—Ç–æ —Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –û–ø–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏
üìç–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ @SirSwapper üë®‚Äçüíª–û–ø–µ—Ä–∞—Ç–æ—Ä/–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @MisterSwapper""", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏–ª", callback_data=f"true_payed")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="stop_pay_process")]
        ]
    ), parse_mode="MARKDOWN")


@dp.callback_query_handler(Text(startswith="true_payed"))
async def process_payments2(call: types.CallbackQuery):
    currency = db.get_user_attr(call.from_user.id, "currency")
    price = cg.get_price(ids='bitcoin', vs_currencies='rub')["bitcoin"]["rub"]

    btc_amount = db.get_user_attr(call.from_user.id, "amount") if currency == "btc" else db.get_user_attr(
        call.from_user.id, "amount") / (price * 1.123)
    print(btc_amount)

    db.set_user_attr(call.from_user.id, "request_time", int(time.time()) + 1800)

    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, text=f"""–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.
–ù–æ–º–µ—Ä: {db.get_user_attr(call.from_user.id, "id")} 
–í—Ä–µ–º—è: 30 –º–∏–Ω—É—Ç 
–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –æ–±–º–µ–Ω –±–æ—Ç–∞ SWAPPER""", reply_markup=keyb_on_start)

    await bot.send_message(781873536, f"""–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: {db.get_user_attr(call.from_user.id, "id")}
–°—É–º–º–∞ –æ–±–º–µ–Ω–∞: {math.ceil(btc_amount * price)} RUB
–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {round(btc_amount, 6)} BTC.
–ù–∞ –∫–æ—à–µ–ª–µ–∫: {db.get_user_attr(call.from_user.id, "pocket_address")}

–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {request_time_left(call.from_user.id)}""", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"finish_request-{call.from_user.id}")]
        ]
    ))


@dp.callback_query_handler(Text(startswith="finish_request"))
async def finish_request(call: types.CallbackQuery):
    user_id = call.data.split('-')[1]
    db.set_user_attr(user_id, "request_time", 0)

    await bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –∑–∞–≤–µ—à–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é!")


@dp.callback_query_handler(Text("cancel_paymentprocess"), state=GetDataForPay.all_states)
@dp.callback_query_handler(Text("cancel_paymentprocess"))
async def cancel_payment_process(call: types.CallbackQuery, state: FSMContext):
    await state.finish()

    try:
        await bot.delete_message(call.from_user.id, call.message.message_id)
    except:
        pass
    await bot.send_message(call.from_user.id, f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏\n\n{text_on_start}",
                           reply_markup=keyb_on_start)


@dp.callback_query_handler(Text("stop_pay_process"))
async def stop_pay_process(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏\n\n{text_on_start}",
                           reply_markup=keyb_on_start)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
