import time

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, \
    ReplyKeyboardRemove
from aiogram.utils import executor
from pycoingecko import CoinGeckoAPI

from db import Database
from states import GetPaymentData, GetDataForPay

cg = CoinGeckoAPI()
db = Database("dbase")

bot = Bot('5819253858:AAH_ZxMh6O2BXON3K0nWt7CIgXmyl_SkIoQ')
dp = Dispatcher(bot, storage=MemoryStorage())

text_on_start = """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å, –¥–æ—Ä–æ–≥–∏–µ –¥—Ä—É–∑—å—è!!!

–í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É
üí°/Start 
‚ùå–û—à–∏–±–∫–∞ –≤ –≤–∞—à–µ–º –ø–ª–∞—Ç–µ–∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç!!!
‚õîÔ∏è–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—Ç—É –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç!!!
–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –≤–≤–æ–¥–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚úÖ‚úÖ‚úÖ
–°–ê–ú–´–ô –ù–ò–ó–ö–ò–ô –ö–£–†–°, –ø—Ä–æ—Å—Ç–æ —Å—Ä–∞–≤–Ω–∏ üìä
–ö–û–ú–ò–°–°–ò–Ø =  0
–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –±–æ—Ç
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 24/7üëçüëçüëç

–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞ –û–ø–µ—Ä–∞—Ç–æ—Ä/–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @MisterSwapper
–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ @SirSwapper
–ß–∞—Ç/–æ—Ç–∑—ã–≤—ã
@SwapperReview"""

keyb_on_start = ReplyKeyboardMarkup(
    keyboard=[
        [
            KeyboardButton(text="–ö—É–ø–∏—Ç—å"),
            KeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å")
        ],
        [
            KeyboardButton(text="–û –Ω–∞—Å‚ùì"),
            KeyboardButton(text="–ö–∞–∫ —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ–±–º–µ–Ω‚ùì")
        ],
        [
            KeyboardButton(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"),
            KeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞")
        ]
    ],
    resize_keyboard=True,
    row_width=2
)


@dp.message_handler(commands=['start'])
async def main(message: types.Message):
    db.add_user(message.from_user.id) if not db.user_exists(message.from_user.id) else None
    await bot.send_message(message.chat.id, text_on_start, reply_markup=keyb_on_start)


@dp.message_handler(content_types=['text'])
async def get_message_text_commands(msg: types.Message):
    user_id = msg.from_user.id
    match msg.text:
        case "–ö—É–ø–∏—Ç—å":
            await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å.", reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton("BTC"),
                        KeyboardButton("ETH")
                    ],
                    [KeyboardButton("–ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True,
                row_width=2
            ))
            await GetPaymentData.get_currency.set()
        case "–ù–∞–∑–∞–¥" | "–û—Ç–º–µ–Ω–∞" | "–í –º–µ–Ω—é":
            await bot.send_message(user_id, text_on_start, reply_markup=keyb_on_start)

        case _:
            await bot.send_message(user_id, text_on_start, reply_markup=keyb_on_start)


@dp.message_handler(content_types=['text'], state=GetPaymentData.get_currency)
async def get_currency(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    match msg.text:
        case "BTC":
            await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [
                        KeyboardButton("–°–±–µ—Ä–±–∞–Ω–∫"),
                        KeyboardButton("–¢–∏–Ω—å–∫–æ—Ñ—Ñ"),
                    ],
                    [KeyboardButton("–û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True,
                row_width=2
            ))
            await GetPaymentData.get_payment.set()

        case "ETH":
            await bot.send_message(user_id, "—Å–∫–æ—Ä–æ...", reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton("–í –º–µ–Ω—é")]
                ],
                resize_keyboard=True,
                row_width=2
            ))
        case "–û—Ç–º–µ–Ω–∞":
            await state.finish()
            await bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                   reply_markup=keyb_on_start)


@dp.message_handler(content_types=['text'], state=GetPaymentData.get_payment)
async def get_payment(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id
    match msg.text:
        case "–°–±–µ—Ä–±–∞–Ω–∫":
            sd = ReplyKeyboardRemove()

            await bot.send_message(user_id, "1", reply_markup=sd)
            await bot.delete_message(user_id, msg.message_id + 1)

            await bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤–∞–º —É–¥–æ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É:", reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="BTC", callback_data="enter_amount-btc"),
                        InlineKeyboardButton(text="–†—É–±–ª—å", callback_data="enter_amount-btc")
                    ]
                ],
            ))
            await state.finish()
        case "–¢–∏–Ω—å–∫–æ—Ñ—Ñ":
            pass
        case "–û—Ç–º–µ–Ω–∞":
            await state.finish()
            await bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                   reply_markup=keyb_on_start)


@dp.callback_query_handler(Text(startswith="enter_amount"))
async def process_enter_amount(call: types.CallbackQuery):
    currency = call.data.split('-')[1]
    price = cg.get_price(ids='bitcoin', vs_currencies='rub')["bitcoin"]["rub"]

    match currency:
        case "btc":
            await call.message.edit_text(f"""üìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 BTC = {price} —Ä—É–±–ª–µ–π
–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å BTC?  ( –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.–•–•–•–• - –ü—Ä–∏–º–µ—Ä:  0.011  )""",
                                         reply_markup=InlineKeyboardMarkup(
                                             inline_keyboard=[
                                                 [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",
                                                                       callback_data="cancel_paymentprocess")]
                                             ]
                                         ))
            await GetDataForPay.get_btc_amount.set()
        case "–†—É–±–ª—å":
            await call.message.edit_text(f"""üìà –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å 1 BTC = {price}
–°–∫–æ–ª—å–∫–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É? (–ü—Ä–∏–º–µ—Ä - 3500)""", reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_paymentprocess")]
                ]
            ))
            await GetDataForPay.get_rub_amount.set()


@dp.message_handler(content_types=['text'], state=GetDataForPay.get_btc_amount)
async def get_btc_amount(msg: types.Message):
    user_id = msg.from_user.id
    try:
        amount = float(msg.text)
        db.set_user_attr(user_id, column_name="amount", value=amount)
        db.set_user_attr(user_id, column_name="currency", value="btc")

        await bot.delete_message(user_id, msg.message_id - 1)
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è.", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_paymentprocess")]
            ]
        ))
        await GetDataForPay.get_crypto_pocket.set()
    except Exception as e:
        print(e)
        await bot.send_message(user_id, "–í—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ", reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel_paymentprocess")]
            ]
        ))


@dp.message_handler(content_types=['text'], state=GetDataForPay.get_crypto_pocket)
async def get_crypto_pocket(msg: types.Message, state: FSMContext):
    db.set_user_attr(msg.from_user.id, "pocket_address", msg.text)

    await bot.delete_message(msg.from_user.id, msg.message_id - 1)
    await bot.send_message(msg.from_user.id, f"""‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ ‚ö†Ô∏è 
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –≤—ã —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC

üìé  –ö –ø–æ–ª—É—á–µ–Ω–∏—é ‚ûñ   {db.get_user_attr(msg.from_user.id, "amount")} BTC.
üìé  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å ‚ûñ   {db.get_user_attr(msg.from_user.id, "pocket_address")}
üî¥ –û–ß–ï–ù–¨ –í–ê–ñ–ù–û üî¥""", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–í—Å—ë —É–∫–∞–∑–∞–Ω–æ –≤–µ—Ä–Ω–æ", callback_data="payments_correct-btc")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="cancel_paymentprocess")]
        ]
    ))
    await state.finish()


@dp.callback_query_handler(Text(startswith="payments_correct"))
async def process_payments1(call: types.CallbackQuery):
    currency = call.data.split('-')[1]
    await call.message.edit_text(f"""‚ö†Ô∏è  –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç ‚û°Ô∏è 30 ‚¨ÖÔ∏è –º–∏–Ω—É—Ç  ‚è∞
    
üìé  –ö–∞—Ä—Ç–∞ –°–±–µ—Ä–±–∞–Ω–∫ RUB  ‚ûñ  **** **** **** ****
üìé  –°—É–º–º–∞ ‚ûñ    —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞  –∏–ª–∏  –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ BTC —É–º–Ω–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞ –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞
üìé  –ö –ø–æ–ª—É—á–µ–Ω–∏—é ‚ûñ  {db.get_user_attr(call.from_user.id, "amount")} {currency}.
üìé  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å ‚ûñ   {db.get_user_attr(call.from_user.id, "pocket_address")}
üî¥ –û–ß–ï–ù–¨ –í–ê–ñ–ù–û üî¥

–í–≤–æ–¥–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—É–º–º—É  –∫–∞–∫ –≤—ã–¥–∞–ª‚òùÔ∏è –≤–∞–º –ë–û–¢‚ùóÔ∏è
–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–∫–∞–∑—ã–≤–∞—Ç—å  –Ω–µ –Ω—É–∂–Ω–æ‚ùóÔ∏è
‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è‚ñ™Ô∏è
üîÜ –ï—Å–ª–∏ –≤–¥—Ä—É–≥ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–∞–º —á—Ç–æ —Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –û–ø–µ—Ä–∞—Ç–æ—Ä—É –∏–ª–∏
üìç–¢–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫–∞ @SirSwapper üë®‚Äçüíª–û–ø–µ—Ä–∞—Ç–æ—Ä/–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @MisterSwapper""", reply_markup=InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏–ª", callback_data=f"true_payed-{currency}")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="stop_pay_process")]
        ]
    ))


@dp.callback_query_handler(Text(startswith="true_payed"))
async def process_payments2(call: types.CallbackQuery):
    currency = call.data.split('-')[1]
    match currency:
        case "btc":
            await bot.send_message(781873536, f"""–°—É–º–º–∞ –æ–±–º–µ–Ω–∞: –≤–æ—Ç –æ—Ç—Å—é–¥–∞(–°—É–º–º–∞ ‚ûñ    —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã –≤ —Ä—É–±–ª—è—Ö –¥–µ–ª–∏—Ç—Å—è –Ω–∞ –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞  –∏–ª–∏  –∑–Ω–∞—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤ BTC —É–º–Ω–æ–∂–µ–Ω–Ω–æ–µ –Ω–∞ –∫—É—Ä—Å –±–∏—Ç–∫–æ–∏–Ω–∞)
–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {db.get_user_attr(call.from_user.id, "")} ( –ö –ø–æ–ª—É—á–µ–Ω–∏—é ‚ûñ   –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ BTC).
–ù–∞ –∫–æ—à–µ–ª–µ–∫: {db.get_user_attr(call.from_user.id, "pocket_address")}

–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {time.time()}""")


@dp.callback_query_handler(Text("cancel_paymentprocess"), state=GetDataForPay.all_states)
async def stop_pay_process(call: types.CallbackQuery, state: FSMContext):
    await state.finish()

    await bot.delete_message(call.from_user.id, call.message.message_id)
    await bot.send_message(call.from_user.id, f"–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏\n\n{text_on_start}",
                           reply_markup=keyb_on_start)


# def sberbankbitcoin(message):
#     button = types.ReplyKeyboardRemove()
#     price = cg.get_price(ids='bitcoin', vs_currencies='rub')
#     msg = bot.send_message(message.chat.id,
#                            f'1 bitcoin == {price["bitcoin"]["rub"] * 1.13} RUB\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞'
#                            f' —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç 2000 —Ä—É–±–ª–µ–π.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤–∞—à–µ–≥–æ –æ–±–º–µ–Ω–∞.', reply_markup=button)
#
#     bot.register_next_step_handler(msg, proverka)


# def proverka(message):
#     try:
#         global course
#         course = {}
#         proverka = {}
#         proverka["sberbankbitcoin"] = message.text
#         course = float(proverka["sberbankbitcoin"])
#         price = cg.get_price(ids='bitcoin', vs_currencies='rub')
#
#         if course >= 2000:
#             msg = bot.send_message(message.chat.id,
#                                    f'–í—ã –ø–æ–ª—É—á–∏—Ç–µ {course / (price["bitcoin"]["rub"] * 1.13)} BTC –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫.\n'
#                                    f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à BTC –∞–¥—Ä–µ—Å')
#             bot.register_next_step_handler(msg, proverka2)
#
#         else:
#             bot.send_message(message.chat.id, '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç 2000 —Ä—É–±–ª–µ–π')
#             sberbankbitcoin(message)
#     except ValueError:
#         bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É')
#         sberbankbitcoin(message)
#
#
# def proverka2(message):
#     global wallet
#     wallet = {}
#     wallet["proverka"] = message.text
#     button = ReplyKeyboardMarkup(resize_keyboard=True)
#     button.add(KeyboardButton('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ–ø–ª–∞—Ç—É'))
#
#     price = cg.get_price(ids='bitcoin', vs_currencies='rub')
#     msg = bot.send_message(message.chat.id,
#                            f'–í—ã –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç–µ {course} RUB –Ω–∞ {course / (price["bitcoin"]["rub"] * 1.13)} BTC.\n'
#                            f'–í–∞—à –∫–æ—à–µ–ª–µ–∫: {wallet["proverka"]}\n\n'
#                            f'–ú—ã –æ–∂–∏–¥–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ Tinkoff –≤ —Ä–∞–∑–º–µ—Ä–µ {course} RUB –ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã: **** **** **** ****',
#                            reply_markup=button)
#
#     bot.register_next_step_handler(msg, finish)
#
#
# def finish(message):
#     price = cg.get_price(ids='bitcoin', vs_currencies='rub')
#     if message.text == '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é –æ–ø–ª–∞—Ç—É':
#         bot.send_message(message.chat.id,
#                          f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ {datetime.datetime.now()}. –û–±–º–µ–Ω –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±—ã—á–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–∏ 30–º–∏–Ω—É—Ç.\n'
#                          '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ –æ–±–º–µ–Ω –±–æ—Ç–∞ SWAPPER')
#         bot.send_message(f"–°—É–º–º–∞ –æ–±–º–µ–Ω–∞: {course}\n"
#                          f"–°—É–º–º–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é: {course / (price['bitcoin']['rub'] * 1.13)} BTC\n"
#                          f"–ù–∞ –∫–æ—à–µ–ª–µ–∫: {wallet['proverka']}\n\n"
#                          f"–í—Ä–µ–º—è –∑–∞—è–≤–∫–∏: {datetime.datetime.now()}")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
